class palindrome12
{
	public static void main(String[] args) {
		int sum=0,temp,r; //int sum=0,temp,r
		int n=454;
		temp=n;
		while(n>0){


	r=n%10; //remainder is calculated if % sign is given int he program
	sum=(sum*10)+r;
	n=n/10; //quotient is calculated if  / sign is given in the program
	}
	if(temp==sum){
		System.out.println("it is a palindrome number");
	}
		else {
			System.out.println("it is not a palindrome number");
		}
	}
}

system.out.println("===bubblesort====");
class GFG 
{
    // An optimized version of Bubble Sort
    static void bubbleSort(int arr[], int n)
    {
        int i, j, temp;
        boolean swapped;
        for (i = 0; i < n - 1; i++) 
        {
            swapped = false;
            for (j = 0; j < n - i - 1; j++) 
            {
                if (arr[j] > arr[j + 1]) 
                {
                    // swap arr[j] and arr[j+1]
                    temp = arr[j];
                    arr[j] = arr[j + 1];
		     arr[j + 1] = temp;
                    swapped = true;
                }
            }

            // IF no two elements were 
            // swapped by inner loop, then break
            if (swapped == false)
                break;
        }
    }

    // Function to print an array 
    static void printArray(int arr[], int size)
    {
        int i;
	 for (i = 0; i < size; i++)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    // Driver program
    public static void main(String args[])
    {
        int arr[] = { 64, 34, 25, 12, 22, 11, 90 };
        int n = arr.length;
        bubbleSort(arr, n);
        System.out.println("Sorted array: ");
        printArray(arr, n);
    }
}

system.out.println("============insertion sort===========");
package com.testyantra.java.assinement1;

public class InsertionSort {

	public static void insertionSort(int array[]) {
		int n = array.length;

		for (int j = 1; j < n; j++) {
			int key = array[j];
			int i = j - 1;
			while ((i > -1) && (array[i] > key)) {
				array[i + 1] = array[i];
				i--;
			}
			array[i + 1] = key;
		}

	}

	public static void main(String[] args) {
		int[] arr1 = { 9, 14, 3, 2, 43, 11, 58, 22 };
		System.out.println("===Befor insertion Sort===");

		for (int i : arr1) {
			System.out.println(i + "");
		}
		System.out.println();

		insertionSort(arr1); // sorting array using insertion sort

		System.out.println("After Insertion Sort");

		for (int i : arr1) {
			System.out.println(i + "");

		}
	}

}

system.out.println("===merge===");
package com.testyantra.java.assinement1;

public class Merge {
	void merge(int a[], int beg, int mid, int end) {
		int i, j, k;
		int n1 = mid - beg + 1;
		int n2 = end - mid;

		/* temporary Arrays */
		int LeftArray[] = new int[n1];
		int RightArray[] = new int[n2];

		/* copy data to temp arrays */
		for (i = 0; i < n1; i++)
			LeftArray[i] = a[beg + i];
		for (j = 0; j < n2; j++)
			RightArray[j] = a[mid + 1 + j];

		i = 0; /* initial index of first sub-array */
		j = 0; /* initial index of second sub-array */
		k = beg; /* initial index of merged sub-array */

		while (i < n1 && j < n2) {
			if (LeftArray[i] <= RightArray[j]) {
				a[k] = LeftArray[i];
				i++;
			} else {
				a[k] = RightArray[j];
				j++;
			}
			k++;
		}
		while (i < n1) {
			a[k] = LeftArray[i];
			i++;
			k++;
		}

		while (j < n2) {
			a[k] = RightArray[j];
			j++;
			k++;
		}
	}

	void mergeSort(int a[], int beg, int end) {
		if (beg < end) {
			int mid = (beg + end) / 2;
			mergeSort(a, beg, mid);
			mergeSort(a, mid + 1, end);
			merge(a, beg, mid, end);
		}
	}

	/* Function to print the array */
	void printArray(int a[], int n) {
		int i;
		for (i = 0; i < n; i++)
			System.out.print(a[i] + " ");
	}

	public static void main(String[] args) {
		int a[] = { 11, 30, 24, 7, 31, 16, 39, 41 };
		int n = a.length;
		Merge m1 = new Merge();
		System.out.println("\nBefore sorting array elements are - ");
		m1.printArray(a, n);
		m1.mergeSort(a, 0, n - 1);
		System.out.println("\nAfter sorting array elements are - ");
		m1.printArray(a, n);
		System.out.println("");

	}

}

system.out.println("==========quicksort=====");

package com.testyantra.java.assinement1;

public class QuickSort {

	int partition(int arr[], int low, int high) {
		int pivot = arr[high];
		int i = (low - 1); // index of smaller element
		for (int j = low; j < high; j++) {
			// If current element is smaller than or
			// equal to pivot
			if (arr[j] <= pivot) {
				i++;

				// swap arr[i] and arr[j]
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}

		// swap arr[i+1] and arr[high] (or pivot)
		int temp = arr[i + 1];
		arr[i + 1] = arr[high];
		arr[high] = temp;

		return i + 1;
	}

	/*
	 * The main function that implements QuickSort() arr[] --> Array to be sorted,
	 * low --> Starting index, high --> Ending index
	 */
	void sort(int arr[], int low, int high) {
		if (low < high) {
			/*
			 * pi is partitioning index, arr[pi] is now at right place
			 */
			int pi = partition(arr, low, high);

			// Recursively sort elements before
			// partition and after partition
			sort(arr, low, pi - 1);
			sort(arr, pi + 1, high);
		}
	}

	/* A utility function to print array of size n */
	static void printArray(int arr[]) {
		int n = arr.length;
		for (int i = 0; i < n; ++i)
			System.out.print(arr[i] + " ");
		System.out.println();
	}

	// Driver program

	public static void main(String[] args) {

		int arr[] = { 10, 7, 8, 9, 1, 5 };
		int n = arr.length;

		QuickSort ob = new QuickSort();
		ob.sort(arr, 0, n - 1);

		System.out.println("====Quicksorted array===");
		printArray(arr);

	}

}

system.out.println("====selection sort======");

package com.testyantra.java.assinement1;

public class SelectionSort {

	void sort(int arr[]) {
		int n = arr.length;
		
		//One by one move boundary of unsorted sub array
		
		for (int i = 0; i < n-1; i++) {
			
			// Find the minimum element in unsorted array
			
			int min_idx = i;
			for (int j = 0; j < i+1; j++) {
				if (arr[j] < arr[min_idx]) 
					min_idx = j;
					
					//swap the found minimum element with the first
					// element
					
					int temp = arr[min_idx];
					arr[min_idx] = arr[i];
					arr[i] = temp;
				}
				
			}
	}

	// Print the array

	void printArray(int arr[]) {

		int n = arr.length;
		for (int i = 0; i < n; i++) {
			System.out.println(arr[i] + "");
			System.out.println();
		}

		// Driver code to test above

	}

	public static void main(String[] args) {
		
		SelectionSort ob = new SelectionSort();
		int arr[] = {64,25,12,22,11};
		ob.sort(arr);
		System.out.println("====Sort array====");
		ob.printArray(arr);
		
	

	}

}

system.out.println("=====string formatter======");
package StringPrograms;

public class StringFormatter {
	
	public static String reverseString(String str) {
		
		char ch[] = str.toCharArray();
		String rev = "";
		for (int i = ch.length - 1; i >= 0; i--) {
			rev += ch[i];
		}
		
		return rev;
	}

}